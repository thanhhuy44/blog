import Card from "@/components/Card";
import MainLayout from "@/layouts/MainLayout";
import { Metadata } from "next";
import { ReactElement, useEffect, useState } from "react";
import { Swiper, SwiperSlide } from "swiper/react";
import Link from "next/link";
import { AppState } from "@/redux";
import { useSelector } from "react-redux";
import Skeleton from "react-loading-skeleton";
import CardLoading from "@/components/CardLoading";
import BlogApi from "@/api/blog";
import dayjs from "dayjs";
import { Blog } from "@/interface";
import Image from "next/image";

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

interface Category {
  name: string;
}

const categories: Category[] = [
  {
    name: "All",
  },
  {
    name: "Technology",
  },
  {
    name: "Culture",
  },
  {
    name: "Fashion",
  },
  {
    name: "Trending",
  },
];

function Home() {
  const user = useSelector((state: AppState) => state.user.user);
  const [page, setPage] = useState<number>(1);
  const [loading, setLoading] = useState<boolean>(true);
  const [loadMore, setLoadMore] = useState<boolean>(false);
  const [popularBlogs, setPopularBlogs] = useState<Blog[]>([]);
  const [editorPickBlogs, setEditorPickBlogs] = useState<Blog[]>([]);
  const [latestBlogs, setLatestBlogs] = useState<Blog[]>([]);
  const [currentCategory, setCurrentCategory] = useState<Category>({
    name: "All",
  });

  const handleGetPopularBlogs = async () => {
    const response = await BlogApi.getPopular();
    if (response) {
      setPopularBlogs(response as Blog[]);
    }
  };

  const handleGetEditorPickBlogs = async () => {
    const response = await BlogApi.getEditorPick();
    if (response) {
      setEditorPickBlogs(response as Blog[]);
    }
  };

  const handleGetLatestBlogs = async (page: number) => {
    const response = await BlogApi.getAll(page);
    if (response) {
      setLatestBlogs(response as Blog[]);
    }
  };

  const handleGetHomeData = async () => {
    await handleGetPopularBlogs();
    await handleGetEditorPickBlogs();
    await handleGetLatestBlogs(page);

    setTimeout(() => {
      setLoading(false);
    }, 1500);
  };

  useEffect(() => {
    handleGetHomeData();
  }, []);

  return loading ? (
    <div className="container mx-auto m-8 grid grid-cols-4 gap-8">
      <CardLoading />
      <CardLoading />
      <CardLoading />
      <CardLoading />
      <CardLoading />
      <CardLoading />
      <CardLoading />
      <CardLoading />
      <CardLoading />
      <CardLoading />
      <CardLoading />
      <CardLoading />
    </div>
  ) : (
    <>
      <Swiper>
        {popularBlogs.length
          ? popularBlogs.map((item, index) => (
              <SwiperSlide key={index}>
                <div className="block relative aspect-[21/9]">
                  {/* <img
                    className="w-full aspect-[21/9] object-cover object-center"
                    src={item.banner}
                    alt="banner"
                  /> */}
                  <Image
                    src={item.banner}
                    fill
                    alt="banner"
                    className="w-full aspect-[21/9] object-cover object-center"
                  />
                  <div className="absolute left-0 top-0 right-0 bottom-0 bg-black/50 ">
                    <div className="container mx-auto pb-24 flex h-full items-end justify-between">
                      <div className="flex-1 flex flex-col gap-y-4">
                        <p className="text-[#e5e5e5] text-xs font-light leading-5">
                          {dayjs(item.createdAt).format("DD/MM/YYYY")}
                        </p>
                        <Link
                          href={{
                            pathname: `/blogs/${item.slug}`,
                            query: {
                              id: item._id,
                            },
                          }}
                          className="text-[#f8f9fa] text-2xl font-bold leading-10 max-w-[600px]"
                        >
                          <span>{item.title}</span>
                        </Link>
                        <p className="text-[#e5e5e5] text-xs font-light leading-5">
                          {item.description}
                        </p>
                      </div>
                      <span>
                        {index + 1}/{popularBlogs.length}
                      </span>
                    </div>
                  </div>
                </div>
              </SwiperSlide>
            ))
          : null}
      </Swiper>
      <div className="container mx-auto my-24">
        <h1 className="text-[#495057] text-2xl font-medium leading-5">
          {`Editor's Picks`}
        </h1>
        <div className="grid grid-cols-2 gap-8 mt-14 mb-16">
          <div className="flex flex-col gap-y-10">
            {editorPickBlogs.map((blog, index) =>
              index ? <Card direction="row" data={blog} key={index} /> : null
            )}
          </div>
          <div className="relative w-full h-full aspect-[3/4] rounded overflow-hidden">
            <Image
              src={editorPickBlogs[0].banner}
              alt="banner"
              fill
              className="w-full aspect-[3/4] object-cover object-center"
            />
            <div className="absolute top-0 left-0 right-0 bottom-0 bg-black/50 flex items-end">
              <div className="flex-1 flex flex-col gap-y-4 mb-12 ml-12">
                <p className="text-[#e5e5e5] text-xs font-light leading-5">
                  {dayjs(editorPickBlogs[0].createdAt).format("DD/MM/YYYY")}
                </p>
                <Link
                  href={{
                    pathname: `/blogs/${editorPickBlogs[0].slug}`,
                    query: {
                      id: editorPickBlogs[0]._id,
                    },
                  }}
                >
                  <span className="text-[#f8f9fa] text-2xl font-bold leading-10 max-w-[600px]">
                    {editorPickBlogs[0].title}
                  </span>
                </Link>
                <p className="text-[#e5e5e5] text-xs font-light leading-5">
                  {editorPickBlogs[0].description}
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div className="mx-auto container mb-24">
        <div className="container mx-auto">
          <h1 className="text-[#495057] text-2xl font-bold leading-5">
            Latest Articles
          </h1>
          <div className="my-11 flex items-center gap-x-6 text-xs font-medium leading-6">
            {categories.map((category, index) => (
              <p
                className={`cursor-pointer ${
                  currentCategory.name === category.name
                    ? "text-[#495057]"
                    : "text-[#C4C4C4]"
                }`}
                onClick={() => setCurrentCategory(category)}
                key={index}
              >
                {category.name}
              </p>
            ))}
          </div>
        </div>
        <div className="grid grid-cols-4 gap-x-8 gap-y-11">
          {latestBlogs.length
            ? latestBlogs.map((blog, index) => (
                <Card direction="col" data={blog} key={index} />
              ))
            : null}
        </div>
      </div>
    </>
  );
}

Home.getLayout = function getLayout(page: ReactElement) {
  return <MainLayout>{page}</MainLayout>;
};

export default Home;
